name: Build and push Docker image to Docker Hub

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get latest version number from Docker Hub
        id: get-latest-version
        uses: docker/build-push-action@v2
        with:
          context: .
          load-balancer: least-loaded
          target: |
            docker.io/${{ secrets.DOCKER_USERNAME }}/my-image:latest
            docker.io/${{ secrets.DOCKER_USERNAME }}/my-image:${{ github.sha }}
          cache-from: |
            type=registry,ref=docker.io/${{ secrets.DOCKER_USERNAME }}/my-image:latest
            type=registry,ref=docker.io/${{ secrets.DOCKER_USERNAME }}/my-image:${{ github.sha }}
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled

      - name: Set up version number
        id: version
        run: echo "::set-output name=tag::$(echo ${{ steps.get-latest-version.outputs.tags }} | sed -E 's/(.*)v?([0-9]+\.[0-9]+\.[0-9]+.*)/\2.\1/g' | awk -F. '{print \"v\"$1\".\"$2\".\"$3+1}')"

      - name: Build Docker image
        run: npm run build:docker
        env:
          DOCKER_BUILDKIT: 1
          DOCKER_CLI_EXPERIMENTAL: enabled

      - name: Push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: |
            docker.io/${{ secrets.DOCKER_USERNAME }}/my-image:${{ steps.version.outputs.tag }}
            docker.io/${{ secrets.DOCKER_USERNAME }}/my-image:latest
          cache-from: |
            type=registry,ref=docker.io/${{ secrets.DOCKER_USERNAME }}/my-image:latest
            type=registry,ref=docker.io/${{ secrets.DOCKER_USERNAME }}/my-image:${{ steps.get-latest-version.outputs.digest }}
        env:
          DOCKER_BUILDKIT: 1
          DOCKER_CLI_EXPERIMENTAL: enabled
